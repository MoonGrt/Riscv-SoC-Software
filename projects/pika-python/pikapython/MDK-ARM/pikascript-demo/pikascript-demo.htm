<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [pikascript-demo\pikascript-demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image pikascript-demo\pikascript-demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6070001: Last Updated: Tue Nov 19 10:27:38 2024
<BR><P>
<H3>Maximum Stack Usage =       1616 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__obj_shellLineHandler_REPL &rArr; AST_parseStmt &rArr;  AST_parseStmt (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[47]">byteCodeFrame_deinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[fd]">__link_removeNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[4b]">obj_getPtr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">obj_getHostObj</a><BR>
 <LI><a href="#[da]">__link_deinit_pyload</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[f2]">args_pushArg_name</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ef]">args_pushArg</a><BR>
 <LI><a href="#[12c]">__obj_getObjWithKeepDeepth</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[12a]">obj_getArg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12a]">obj_getArg</a><BR>
 <LI><a href="#[12d]">__obj_setArg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">obj_getHostObj</a><BR>
 <LI><a href="#[ee]">args_setArg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ef]">args_pushArg</a><BR>
 <LI><a href="#[e4]">arg_append</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[d8]">strsFormat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f6]">args_getBuff</a><BR>
 <LI><a href="#[e0]">obj_toStr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[128]">pikaVM_runByteCode</a><BR>
 <LI><a href="#[df]">arg_singlePrint</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">obj_deinit</a><BR>
 <LI><a href="#[42]">arg_strAppend</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">strsAppend</a><BR>
 <LI><a href="#[d5]">__printBytes</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[171]">VMState_solveUnusedStack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[10f]">_stack_pushArg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dc]">arg_deinitHeap</a><BR>
 <LI><a href="#[10c]">stack_deinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[de]">obj_deinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">arg_deinit</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[149]">AST_genAsm_sub</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[149]">AST_genAsm_sub</a><BR>
 <LI><a href="#[15a]">AST_parseSubStmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">AST_parseStmt</a><BR>
 <LI><a href="#[146]">AST_parseStmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">AST_parseStmt</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">Cursor_removeTokensBetween</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[55]">New_LibObj</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[54]">New_PikaMain</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[4a]">New_PikaStdData_Dict</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[49]">New_PikaStdData_Tuple</a> from lto-llvm-4aeb69.o(.text) referenced 2 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[51]">New_PikaStdData_dict_items</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[50]">New_PikaStdData_dict_keys</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[53]">New_PikaStdLib</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[52]">New_PikaStdLib_MemChecker</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[4c]">New_PikaStdLib_RangeObj</a> from lto-llvm-4aeb69.o(.text) referenced 2 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[46]">New_PikaStdLib_SysObj</a> from lto-llvm-4aeb69.o(.text) referenced 3 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[3d]">New_TinyObj</a> from lto-llvm-4aeb69.o(.text) referenced 4 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8d]">PikaStdData_Dict___contains__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[8e]">PikaStdData_Dict___del__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[8c]">PikaStdData_Dict___getitem__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[88]">PikaStdData_Dict___init__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[89]">PikaStdData_Dict___iter__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[8f]">PikaStdData_Dict___len__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[8a]">PikaStdData_Dict___next__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[8b]">PikaStdData_Dict___setitem__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[90]">PikaStdData_Dict___str__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[83]">PikaStdData_Dict_getMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[85]">PikaStdData_Dict_itemsMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[91]">PikaStdData_Dict_keysMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[86]">PikaStdData_Dict_removeMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[84]">PikaStdData_Dict_setMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[87]">PikaStdData_Dict_updateMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[98]">PikaStdData_Tuple___contains__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[99]">PikaStdData_Tuple___del__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[97]">PikaStdData_Tuple___getitem__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[94]">PikaStdData_Tuple___init__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[95]">PikaStdData_Tuple___iter__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[9a]">PikaStdData_Tuple___len__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[96]">PikaStdData_Tuple___next__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[9b]">PikaStdData_Tuple___str__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[92]">PikaStdData_Tuple_getMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[93]">PikaStdData_Tuple_lenMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[9c]">PikaStdData_dict_items___iter__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[9e]">PikaStdData_dict_items___len__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[9d]">PikaStdData_dict_items___next__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[9f]">PikaStdData_dict_items___str__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a0]">PikaStdData_dict_keys___iter__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a2]">PikaStdData_dict_keys___len__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a1]">PikaStdData_dict_keys___next__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a3]">PikaStdData_dict_keys___str__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a4]">PikaStdLib_MemCheckerMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a5]">PikaStdLib_MemChecker_maxMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a6]">PikaStdLib_MemChecker_nowMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a7]">PikaStdLib_RangeObj___next__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a8]">PikaStdLib_SysObjMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[81]">PikaStdLib_SysObj___getitem__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[80]">PikaStdLib_SysObj___setitem__Method</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[7d]">PikaStdLib_SysObj_floatMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[7a]">PikaStdLib_SysObj_intMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[82]">PikaStdLib_SysObj_iterMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[7b]">PikaStdLib_SysObj_lenMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[7e]">PikaStdLib_SysObj_printMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[7f]">PikaStdLib_SysObj_rangeMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[7c]">PikaStdLib_SysObj_strMethod</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from lto-llvm-4aeb69.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[77]">VM_instruction_handler_ASS</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[67]">VM_instruction_handler_BRK</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[6d]">VM_instruction_handler_BYT</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[6c]">VM_instruction_handler_CLS</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[68]">VM_instruction_handler_CTN</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[75]">VM_instruction_handler_DCT</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[62]">VM_instruction_handler_DEF</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[65]">VM_instruction_handler_DEL</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[66]">VM_instruction_handler_EST</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[78]">VM_instruction_handler_EXP</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[73]">VM_instruction_handler_GER</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[69]">VM_instruction_handler_GLB</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[6f]">VM_instruction_handler_IMP</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[60]">VM_instruction_handler_JEZ</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[5f]">VM_instruction_handler_JMP</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[79]">VM_instruction_handler_JNZ</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[6e]">VM_instruction_handler_LST</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[64]">VM_instruction_handler_NEL</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[6b]">VM_instruction_handler_NEW</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[59]">VM_instruction_handler_NON</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[71]">VM_instruction_handler_NTR</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[5e]">VM_instruction_handler_NUM</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[61]">VM_instruction_handler_OPT</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[5d]">VM_instruction_handler_OUT</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[6a]">VM_instruction_handler_RAS</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[5a]">VM_instruction_handler_REF</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[63]">VM_instruction_handler_RET</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[72]">VM_instruction_handler_RIS</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[5b]">VM_instruction_handler_RUN</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[74]">VM_instruction_handler_SER</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[76]">VM_instruction_handler_SLC</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[5c]">VM_instruction_handler_STR</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[70]">VM_instruction_handler_TRY</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.rodata)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[a9]">__obj_shellLineHandler_REPL</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.data)
 <LI><a href="#[56]">__platform_getchar</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[3b]">__platform_printf</a> from lto-llvm-4aeb69.o(.text) referenced 3 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[58]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[45]">arg_deinit</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[4f]">arg_getInt</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[44]">arg_newStr.147</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[42]">arg_strAppend</a> from lto-llvm-4aeb69.o(.text) referenced 3 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[4d]">args_getNode</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[47]">byteCodeFrame_deinit</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[57]">fputc</a> from lto-llvm-4aeb69.o(.text) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[3a]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[35]">main</a> from lto-llvm-4aeb69.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[40]">obj_getInt</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[4b]">obj_getPtr</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[3f]">obj_setStr</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[4e]">pikaList_getArg</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[3c]">strlen</a> from strlen.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[41]">strsAppend</a> from lto-llvm-4aeb69.o(.text) referenced 2 times from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[3e]">strsPopToken</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
 <LI><a href="#[48]">strsReplace</a> from lto-llvm-4aeb69.o(.text) referenced from lto-llvm-4aeb69.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[aa]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[191]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[192]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[193]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[194]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[195]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[3a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[124]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
</UL>

<P><STRONG><a name="[118]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopFirstToken
</UL>

<P><STRONG><a name="[3c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_BYT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetFirstToken
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsDeleteChar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCut
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopFirstToken
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIsStartWith
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strGetFirstToken
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCut
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strAppendWithSize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_transferd_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[ed]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_isEqual
</UL>

<P><STRONG><a name="[125]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[11b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIsStartWith
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[ad]"></a>strtoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_transferd_str
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[b4]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[ae]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>

<P><STRONG><a name="[197]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemChecker_nowMethod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemChecker_maxMethod
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[198]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>

<P><STRONG><a name="[199]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[19a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[c3]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[ba]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[c6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
</UL>

<P><STRONG><a name="[19c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 2304 bytes, Stack size 64 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = main &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strAppendWithSize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newMetaObj
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getByteCodeFromModule
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_putc_cmd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[167]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[19d]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setSymbel
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushPyload
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setContent
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_append
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__class_defineMethodWithType
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
</UL>

<P><STRONG><a name="[185]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemChecker_nowMethod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemChecker_maxMethod
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
</UL>

<P><STRONG><a name="[187]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a3]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1a4]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1a5]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[15c]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>

<P><STRONG><a name="[189]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a6]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1a7]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1a8]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[122]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_sprintf
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[107]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaFree
</UL>

<P><STRONG><a name="[106]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaMalloc
</UL>

<P><STRONG><a name="[1aa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ac]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[181]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[188]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
</UL>

<P><STRONG><a name="[18e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[58]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[18a]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b2]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[c1]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[147]"></a>ASM_addBlockDeepth</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ASM_addBlockDeepth &rArr; AST_getBlockDeepthNow &rArr; obj_getInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_getBlockDeepthNow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[149]"></a>AST_genAsm_sub</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + In Cycle
<LI>Call Chain = AST_genAsm_sub &rArr;  AST_genAsm_sub (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_sprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[148]"></a>AST_getBlockDeepthNow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = AST_getBlockDeepthNow &rArr; obj_getInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASM_addBlockDeepth
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[146]"></a>AST_parseStmt</STRONG> (Thumb, 3356 bytes, Stack size 192 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + In Cycle
<LI>Call Chain = AST_parseStmt &rArr;  AST_parseStmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_beforeIter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_deinit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetFirstToken
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsDeleteChar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCut
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCacheArg
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIsStartWith
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_sub_stmt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[15a]"></a>AST_parseSubStmt</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = AST_parseSubStmt &rArr;  AST_parseStmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
</UL>

<P><STRONG><a name="[142]"></a>Cursor_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = Cursor_deinit &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[159]"></a>Cursor_isContain</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = Cursor_isContain &rArr; Lexer_getTokenStream &rArr; Lexer_setSymbel &rArr; Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TokenStream_getSize
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsPopToken
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
</UL>

<P><STRONG><a name="[141]"></a>Cursor_iterStart</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = Cursor_iterStart &rArr; strsPopToken &rArr; strsCopy &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsPopToken
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[43]"></a>Cursor_removeTokensBetween</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = Cursor_removeTokensBetween &rArr; _Cursor_parse &rArr; Lexer_getTokenStream &rArr; Lexer_setSymbel &rArr; Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_beforeIter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_deinit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>GenRule_toAsm</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = GenRule_toAsm &rArr; AST_genAsm_sub &rArr;  AST_genAsm_sub (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[180]"></a>HAL_GPIO_Init</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>HAL_InitTick</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_Receive</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_getchar
</UL>

<P><STRONG><a name="[143]"></a>Lexer_getTokenStream</STRONG> (Thumb, 1268 bytes, Stack size 88 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = Lexer_getTokenStream &rArr; Lexer_setSymbel &rArr; Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setToken
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setSymbel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_parse
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[156]"></a>Lexer_setSymbel</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = Lexer_setSymbel &rArr; Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setToken
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
</UL>

<P><STRONG><a name="[157]"></a>Lexer_setToken</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setSymbel
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
</UL>

<P><STRONG><a name="[55]"></a>New_LibObj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = New_LibObj &rArr; New_PikaObj &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>New_PikaMain</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = New_PikaMain &rArr; New_PikaStdLib_SysObj &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_SysObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>New_PikaObj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = New_PikaObj &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_TinyObj
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_SysObj
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_RangeObj
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_MemChecker
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_dict_keys
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_dict_items
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_Tuple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_Dict
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_LibObj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[4a]"></a>New_PikaStdData_Dict</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdData_Dict &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>New_PikaStdData_Tuple</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdData_Tuple &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>New_PikaStdData_dict_items</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdData_dict_items &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>New_PikaStdData_dict_keys</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdData_dict_keys &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>New_PikaStdLib</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdLib &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>New_PikaStdLib_MemChecker</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdLib_MemChecker &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>New_PikaStdLib_RangeObj</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdLib_RangeObj &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>New_PikaStdLib_SysObj</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = New_PikaStdLib_SysObj &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>New_TinyObj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = New_TinyObj &rArr; New_PikaObj &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>New_link</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___init__Method
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_pikaList
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getClassObjByNewFun
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[fe]"></a>New_pikaList</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = New_pikaList &rArr; arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newInt
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___init__
</UL>

<P><STRONG><a name="[8d]"></a>PikaStdData_Dict___contains__Method</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PikaStdData_Dict___contains__Method &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_isEqual
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[8e]"></a>PikaStdData_Dict___del__Method</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PikaStdData_Dict___del__Method &rArr; obj_getPtr &rArr;  obj_getHostObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[8c]"></a>PikaStdData_Dict___getitem__Method</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PikaStdData_Dict___getitem__Method &rArr; PikaStdData_Dict_get &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[88]"></a>PikaStdData_Dict___init__Method</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PikaStdData_Dict___init__Method &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[89]"></a>PikaStdData_Dict___iter__Method</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PikaStdData_Dict___iter__Method &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[8f]"></a>PikaStdData_Dict___len__Method</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PikaStdData_Dict___len__Method &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[8a]"></a>PikaStdData_Dict___next__Method</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PikaStdData_Dict___next__Method &rArr; args_setInt &rArr; arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[8b]"></a>PikaStdData_Dict___setitem__Method</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PikaStdData_Dict___setitem__Method &rArr; obj_getStr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[90]"></a>PikaStdData_Dict___str__Method</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = PikaStdData_Dict___str__Method &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.604
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[175]"></a>PikaStdData_Dict_get</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PikaStdData_Dict_get &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_getMethod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___getitem__Method
</UL>

<P><STRONG><a name="[83]"></a>PikaStdData_Dict_getMethod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PikaStdData_Dict_getMethod &rArr; PikaStdData_Dict_get &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[85]"></a>PikaStdData_Dict_itemsMethod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PikaStdData_Dict_itemsMethod &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[91]"></a>PikaStdData_Dict_keysMethod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PikaStdData_Dict_keysMethod &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[86]"></a>PikaStdData_Dict_removeMethod</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PikaStdData_Dict_removeMethod &rArr; obj_getPtr &rArr;  obj_getHostObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_removeArg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[84]"></a>PikaStdData_Dict_setMethod</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PikaStdData_Dict_setMethod &rArr; __vm_Dict_set &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[87]"></a>PikaStdData_Dict_updateMethod</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PikaStdData_Dict_updateMethod &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setRef
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[98]"></a>PikaStdData_Tuple___contains__Method</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PikaStdData_Tuple___contains__Method &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getSize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_isEqual
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[99]"></a>PikaStdData_Tuple___del__Method</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PikaStdData_Tuple___del__Method &rArr; obj_getPtr &rArr;  obj_getHostObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[97]"></a>PikaStdData_Tuple___getitem__Method</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PikaStdData_Tuple___getitem__Method &rArr; PikaStdData_Tuple_get &rArr; arg_copy &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[178]"></a>PikaStdData_Tuple___init__</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PikaStdData_Tuple___init__ &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_pikaList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___init__Method
</UL>

<P><STRONG><a name="[94]"></a>PikaStdData_Tuple___init__Method</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PikaStdData_Tuple___init__Method &rArr; PikaStdData_Tuple___init__ &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___init__
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[95]"></a>PikaStdData_Tuple___iter__Method</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PikaStdData_Tuple___iter__Method &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[9a]"></a>PikaStdData_Tuple___len__Method</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PikaStdData_Tuple___len__Method &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_len
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[96]"></a>PikaStdData_Tuple___next__Method</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PikaStdData_Tuple___next__Method &rArr; args_setInt &rArr; arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[9b]"></a>PikaStdData_Tuple___str__Method</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = PikaStdData_Tuple___str__Method &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[17a]"></a>PikaStdData_Tuple_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PikaStdData_Tuple_get &rArr; arg_copy &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_getMethod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___next__Method
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___getitem__Method
</UL>

<P><STRONG><a name="[92]"></a>PikaStdData_Tuple_getMethod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PikaStdData_Tuple_getMethod &rArr; PikaStdData_Tuple_get &rArr; arg_copy &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[179]"></a>PikaStdData_Tuple_len</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PikaStdData_Tuple_len &rArr; pikaList_getSize &rArr; args_getInt &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getSize
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_lenMethod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___len__Method
</UL>

<P><STRONG><a name="[93]"></a>PikaStdData_Tuple_lenMethod</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PikaStdData_Tuple_lenMethod &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_len
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[9c]"></a>PikaStdData_dict_items___iter__Method</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PikaStdData_dict_items___iter__Method &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[9e]"></a>PikaStdData_dict_items___len__Method</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PikaStdData_dict_items___len__Method &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[177]"></a>PikaStdData_dict_items___next__</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PikaStdData_dict_items___next__ &rArr; PikaStdData_Tuple___init__ &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___init__
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__Method
</UL>

<P><STRONG><a name="[9d]"></a>PikaStdData_dict_items___next__Method</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PikaStdData_dict_items___next__Method &rArr; PikaStdData_dict_items___next__ &rArr; PikaStdData_Tuple___init__ &rArr; obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[9f]"></a>PikaStdData_dict_items___str__Method</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = PikaStdData_dict_items___str__Method &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.604
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a0]"></a>PikaStdData_dict_keys___iter__Method</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PikaStdData_dict_keys___iter__Method &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a2]"></a>PikaStdData_dict_keys___len__Method</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PikaStdData_dict_keys___len__Method &rArr; method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a1]"></a>PikaStdData_dict_keys___next__Method</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PikaStdData_dict_keys___next__Method &rArr; args_setInt &rArr; arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a3]"></a>PikaStdData_dict_keys___str__Method</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = PikaStdData_dict_keys___str__Method &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.604
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a4]"></a>PikaStdLib_MemCheckerMethod</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PikaStdLib_MemCheckerMethod &rArr; arg_newDirectObj &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newDirectObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a5]"></a>PikaStdLib_MemChecker_maxMethod</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PikaStdLib_MemChecker_maxMethod &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a6]"></a>PikaStdLib_MemChecker_nowMethod</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PikaStdLib_MemChecker_nowMethod &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a7]"></a>PikaStdLib_RangeObj___next__Method</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PikaStdLib_RangeObj___next__Method &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[a8]"></a>PikaStdLib_SysObjMethod</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PikaStdLib_SysObjMethod &rArr; arg_newDirectObj &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newDirectObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[81]"></a>PikaStdLib_SysObj___getitem__Method</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = PikaStdLib_SysObj___getitem__Method &rArr; __vm_get &rArr; pikaVM_runByteCode &rArr; _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[80]"></a>PikaStdLib_SysObj___setitem__Method</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PikaStdLib_SysObj___setitem__Method &rArr; pikaVM_runByteCode &rArr; _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.681
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getBytesSize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[7d]"></a>PikaStdLib_SysObj_floatMethod</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PikaStdLib_SysObj_floatMethod &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setSysOut
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setFloat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[7a]"></a>PikaStdLib_SysObj_intMethod</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PikaStdLib_SysObj_intMethod &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setSysOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getBytesSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[82]"></a>PikaStdLib_SysObj_iterMethod</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = PikaStdLib_SysObj_iterMethod &rArr; pikaVM_runByteCode &rArr; _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_to_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[7b]"></a>PikaStdLib_SysObj_lenMethod</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = PikaStdLib_SysObj_lenMethod &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getBytesSize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[7e]"></a>PikaStdLib_SysObj_printMethod</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = PikaStdLib_SysObj_printMethod &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getSize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setSysOut
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getTuple
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_cacheStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.681
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[7f]"></a>PikaStdLib_SysObj_rangeMethod</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PikaStdLib_SysObj_rangeMethod &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getSize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getTuple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStruct
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newDirectObj
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[17c]"></a>PikaStdLib_SysObj_str</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PikaStdLib_SysObj_str &rArr; obj_toStr &rArr;  pikaVM_runByteCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_strMethod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
</UL>

<P><STRONG><a name="[7c]"></a>PikaStdLib_SysObj_strMethod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PikaStdLib_SysObj_strMethod &rArr; PikaStdLib_SysObj_str &rArr; obj_toStr &rArr;  pikaVM_runByteCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[155]"></a>TokenStream_getSize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TokenStream_getSize &rArr; strEqu &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_parse
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
</UL>

<P><STRONG><a name="[c8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[172]"></a>VMState_getAddrOffsetOfJmpBack</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VMState_getAddrOffsetOfJmpBack
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
</UL>

<P><STRONG><a name="[15f]"></a>VMState_getInputArgNum</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VMState_getInputArgNum
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
</UL>

<P><STRONG><a name="[15e]"></a>VMState_loadArgsFromMethodArg</STRONG> (Thumb, 1296 bytes, Stack size 416 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = VMState_loadArgsFromMethodArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_getInputArgNum
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_pikaList
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopLastToken
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCut
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushArg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_setArg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getSize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_time33EndWith
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNameHash
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
</UL>

<P><STRONG><a name="[171]"></a>VMState_solveUnusedStack</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
</UL>

<P><STRONG><a name="[77]"></a>VM_instruction_handler_ASS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[67]"></a>VM_instruction_handler_BRK</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[6d]"></a>VM_instruction_handler_BYT</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = VM_instruction_handler_BYT &rArr; __get_transferd_str &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_transferd_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[6c]"></a>VM_instruction_handler_CLS</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VM_instruction_handler_CLS &rArr; __VM_instruction_handler_DEF &rArr; __class_defineMethodWithType &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VM_instruction_handler_DEF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[68]"></a>VM_instruction_handler_CTN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[75]"></a>VM_instruction_handler_DCT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[62]"></a>VM_instruction_handler_DEF</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VM_instruction_handler_DEF &rArr; __VM_instruction_handler_DEF &rArr; __class_defineMethodWithType &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VM_instruction_handler_DEF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[65]"></a>VM_instruction_handler_DEL</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = VM_instruction_handler_DEL &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkLReg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[66]"></a>VM_instruction_handler_EST</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VM_instruction_handler_EST &rArr; obj_getArg &rArr;  obj_getArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[78]"></a>VM_instruction_handler_EXP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[73]"></a>VM_instruction_handler_GER</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VM_instruction_handler_GER &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[69]"></a>VM_instruction_handler_GLB</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = VM_instruction_handler_GLB &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setStr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.243
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[6f]"></a>VM_instruction_handler_IMP</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = VM_instruction_handler_IMP &rArr; pikaVM_runByteCode &rArr; _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getByteCodeFromModule
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newDirectObj
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[60]"></a>VM_instruction_handler_JEZ</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = VM_instruction_handler_JEZ &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_VM_JEZ
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[5f]"></a>VM_instruction_handler_JMP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VM_instruction_handler_JMP &rArr; fast_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[79]"></a>VM_instruction_handler_JNZ</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = VM_instruction_handler_JNZ &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_VM_JEZ
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[6e]"></a>VM_instruction_handler_LST</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[64]"></a>VM_instruction_handler_NEL</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VM_instruction_handler_NEL &rArr; fast_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[6b]"></a>VM_instruction_handler_NEW</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VM_instruction_handler_NEW &rArr; obj_getArg &rArr;  obj_getArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[59]"></a>VM_instruction_handler_NON</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[71]"></a>VM_instruction_handler_NTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[5e]"></a>VM_instruction_handler_NUM</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VM_instruction_handler_NUM &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[61]"></a>VM_instruction_handler_OPT</STRONG> (Thumb, 1752 bytes, Stack size 160 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = VM_instruction_handler_OPT &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_getInputArgNum
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setSysOut
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setFloat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[5d]"></a>VM_instruction_handler_OUT</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = VM_instruction_handler_OUT &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopFirstToken
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.243
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkLReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[6a]"></a>VM_instruction_handler_RAS</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = VM_instruction_handler_RAS &rArr; obj_removeArg &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setRef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[5a]"></a>VM_instruction_handler_REF</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = VM_instruction_handler_REF &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[63]"></a>VM_instruction_handler_RET</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VM_instruction_handler_RET &rArr; stack_popArg_alloc &rArr; _stack_popArg &rArr; arg_copy_noalloc &rArr; arg_setContent &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[72]"></a>VM_instruction_handler_RIS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[5b]"></a>VM_instruction_handler_RUN</STRONG> (Thumb, 736 bytes, Stack size 136 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = VM_instruction_handler_RUN &rArr; VMState_loadArgsFromMethodArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_getInputArgNum
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setSysOut
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newMetaObj
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_runMethodArgWithState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkLReg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[74]"></a>VM_instruction_handler_SER</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VM_instruction_handler_SER &rArr; fast_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[76]"></a>VM_instruction_handler_SLC</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = VM_instruction_handler_SLC &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[5c]"></a>VM_instruction_handler_STR</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = VM_instruction_handler_STR &rArr; __get_transferd_str &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_transferd_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[70]"></a>VM_instruction_handler_TRY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.rodata)
</UL>
<P><STRONG><a name="[140]"></a>_Cursor_beforeIter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = _Cursor_beforeIter &rArr; strsPopToken &rArr; strsCopy &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsPopToken
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[13f]"></a>_Cursor_parse</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = _Cursor_parse &rArr; Lexer_getTokenStream &rArr; Lexer_setSymbel &rArr; Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TokenStream_getSize
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[169]"></a>_OPT_EQU</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _OPT_EQU &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getBytesSize
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
</UL>

<P><STRONG><a name="[163]"></a>_VM_JEZ</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _VM_JEZ &rArr; fast_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JNZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JEZ
</UL>

<P><STRONG><a name="[16d]"></a>__VM_instruction_handler_DEF</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = __VM_instruction_handler_DEF &rArr; __class_defineMethodWithType &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__class_defineMethodWithType
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_DEF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_CLS
</UL>

<P><STRONG><a name="[139]"></a>__class_defineMethodWithType</STRONG> (Thumb, 76 bytes, Stack size 112 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = __class_defineMethodWithType &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strGetFirstToken
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStruct
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VM_instruction_handler_DEF
</UL>

<P><STRONG><a name="[161]"></a>__get_transferd_str</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = __get_transferd_str &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_STR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_BYT
</UL>

<P><STRONG><a name="[da]"></a>__link_deinit_pyload</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = __link_deinit_pyload &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_STR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_BYT
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setToken
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setSymbel
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_sub_stmt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__class_defineMethodWithType
</UL>

<P><STRONG><a name="[fd]"></a>__link_removeNode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = __link_removeNode &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_removeArg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_runMethodArgWithState
</UL>

<P><STRONG><a name="[12c]"></a>__obj_getObjWithKeepDeepth</STRONG> (Thumb, 256 bytes, Stack size 136 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopFirstToken
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMethodInfo
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getClassObjByNewFun
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setPtrWithType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_to_obj
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
</UL>

<P><STRONG><a name="[12d]"></a>__obj_setArg</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = __obj_setArg &rArr;  obj_getHostObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>

<P><STRONG><a name="[a9]"></a>__obj_shellLineHandler_REPL</STRONG> (Thumb, 5284 bytes, Stack size 320 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = __obj_shellLineHandler_REPL &rArr; AST_parseStmt &rArr;  AST_parseStmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_beforeIter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_getBlockDeepthNow
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASM_addBlockDeepth
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsPopToken
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetFirstToken
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsDeleteChar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCut
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIsStartWith
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushStr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_deinit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueObj_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteCodeFrame_deinit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.243
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_append
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>__pikaVM_runByteCodeFrameWithState</STRONG> (Thumb, 748 bytes, Stack size 192 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_solveUnusedStack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_getAddrOffsetOfJmpBack
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushArg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_deinit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_runMethodArgWithState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[56]"></a>__platform_getchar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __platform_getchar &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>__platform_printf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __platform_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_DEL
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemChecker_nowMethod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemChecker_maxMethod
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaMalloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setSysOut
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_putc_cmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>__platform_sprintf</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __platform_sprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
</UL>

<P><STRONG><a name="[d5]"></a>__printBytes</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = __printBytes &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_cacheStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getBytesSize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
</UL>

<P><STRONG><a name="[174]"></a>__vm_Dict_set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __vm_Dict_set &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_setMethod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___setitem__Method
</UL>

<P><STRONG><a name="[16e]"></a>__vm_get</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = __vm_get &rArr; pikaVM_runByteCode &rArr; _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.243
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getBytesSize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_SLC
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___getitem__Method
</UL>

<P><STRONG><a name="[cc]"></a>_arg_set_hash</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNameHash
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setContent
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
</UL>

<P><STRONG><a name="[131]"></a>_arg_to_obj</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _arg_to_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_iterMethod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[13e]"></a>_cache_bytecodeframe</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _cache_bytecodeframe &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_append
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[15d]"></a>_checkLReg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_DEL
</UL>

<P><STRONG><a name="[170]"></a>_do_byteCodeFrame_loadByteCode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
</UL>

<P><STRONG><a name="[16f]"></a>_do_pikaVM_runByteCode</STRONG> (Thumb, 180 bytes, Stack size 144 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteCodeFrame_deinit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_byteCodeFrame_loadByteCode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>

<P><STRONG><a name="[127]"></a>_obj_getMethodArg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _obj_getMethodArg &rArr; obj_getArg &rArr;  obj_getArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[12b]"></a>_obj_getProp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _obj_getProp &rArr; obj_getClassObjByNewFun &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getClassObjByNewFun
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit_no_del
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_time33
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_updateProxyFlag
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[160]"></a>_obj_runMethodArgWithState</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = _obj_runMethodArgWithState &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_removeNode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
</UL>

<P><STRONG><a name="[154]"></a>_obj_updateProxyFlag</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _obj_updateProxyFlag &rArr; _obj_getProp &rArr; obj_getClassObjByNewFun &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_SysObj
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_RangeObj
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_MemChecker
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_dict_keys
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_dict_items
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_Tuple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_Dict
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaMain
</UL>

<P><STRONG><a name="[13d]"></a>_putc_cmd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _putc_cmd &rArr; __platform_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>_remove_sub_stmt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = _remove_sub_stmt &rArr; strsCopy &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_cacheStr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
</UL>

<P><STRONG><a name="[111]"></a>_stack_popArg</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _stack_popArg &rArr; arg_copy_noalloc &rArr; arg_setContent &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JNZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JEZ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_popArg_alloc
</UL>

<P><STRONG><a name="[10f]"></a>_stack_pushArg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _stack_pushArg &rArr;  arg_deinitHeap (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushPyload
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinitHeap
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushArg
</UL>

<P><STRONG><a name="[e4]"></a>arg_append</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = arg_append &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNameHash
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[e9]"></a>arg_copy</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = arg_copy &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNameHash
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NEW
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_iterMethod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___next__Method
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___next__Method
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_setArg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>

<P><STRONG><a name="[ea]"></a>arg_copy_noalloc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arg_copy_noalloc &rArr; arg_setContent &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNameHash
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setContent
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
</UL>

<P><STRONG><a name="[cd]"></a>arg_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_time33
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setContent
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_append
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
</UL>

<P><STRONG><a name="[45]"></a>arg_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_freeContent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinitHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_SLC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JNZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JEZ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_GLB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_solveUnusedStack
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setToken
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCacheArg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_deinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteCodeFrame_deinit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_append
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_pushArg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_removeNode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>arg_deinitHeap</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_pushArg
</UL>

<P><STRONG><a name="[c9]"></a>arg_freeContent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arg_freeContent &rArr; pikaFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setContent
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>

<P><STRONG><a name="[d6]"></a>arg_getBytesSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
</UL>

<P><STRONG><a name="[e1]"></a>arg_getFloat</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
</UL>

<P><STRONG><a name="[4f]"></a>arg_getInt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JNZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JEZ
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___getitem__Method
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>arg_getPtr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_isEqual
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinitHeap
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_pushArg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_to_obj
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[eb]"></a>arg_isEqual</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arg_isEqual &rArr; strEqu &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strEqu
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___contains__Method
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___contains__Method
</UL>

<P><STRONG><a name="[137]"></a>arg_newDirectObj</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newDirectObj &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObjMethod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemCheckerMethod
</UL>

<P><STRONG><a name="[f9]"></a>arg_newInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_pikaList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
</UL>

<P><STRONG><a name="[136]"></a>arg_newMetaObj</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arg_newMetaObj &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newMetaObj
</UL>

<P><STRONG><a name="[14f]"></a>arg_newStr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newStr &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
</UL>

<P><STRONG><a name="[44]"></a>arg_newStr.147</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newStr.147 &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_beforeIter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setToken
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>arg_newStr.243</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newStr.243 &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_GLB
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[176]"></a>arg_newStr.604</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newStr.604 &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
</UL>

<P><STRONG><a name="[17b]"></a>arg_newStr.681</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_newStr.681 &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
</UL>

<P><STRONG><a name="[db]"></a>arg_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_time33
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStruct
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setFloat
</UL>

<P><STRONG><a name="[d4]"></a>arg_setBytes</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_setBytes &rArr; arg_setName &rArr; arg_setNameHash &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_BYT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>

<P><STRONG><a name="[cb]"></a>arg_setContent</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_setContent &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_freeContent
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
</UL>

<P><STRONG><a name="[e7]"></a>arg_setFloat</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_setFloat &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
</UL>

<P><STRONG><a name="[e5]"></a>arg_setInt</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_GER
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_EST
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_RangeObj___next__Method
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newInt
</UL>

<P><STRONG><a name="[d3]"></a>arg_setName</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arg_setName &rArr; arg_setNameHash &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_time33
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNameHash
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_setArg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newMetaObj
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setBytes
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>

<P><STRONG><a name="[d2]"></a>arg_setNameHash</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = arg_setNameHash &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy_noalloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_append
</UL>

<P><STRONG><a name="[e6]"></a>arg_setNull</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arg_setNull &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_RangeObj___next__Method
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___next__Method
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___next__Method
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___next__Method
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnObj
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[e8]"></a>arg_setPtr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnObj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setPtrWithType
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newMetaObj
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newDirectObj
</UL>

<P><STRONG><a name="[f4]"></a>arg_setRef</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arg_setRef &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___iter__Method
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___iter__Method
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___iter__Method
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___iter__Method
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setRef
</UL>

<P><STRONG><a name="[d7]"></a>arg_setStr</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_STR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushStr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setStr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.681
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.604
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.243
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr.147
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
</UL>

<P><STRONG><a name="[e3]"></a>arg_setStruct</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arg_setStruct &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__class_defineMethodWithType
</UL>

<P><STRONG><a name="[df]"></a>arg_singlePrint</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + In Cycle
<LI>Call Chain = arg_singlePrint &rArr;  obj_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_solveUnusedStack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
</UL>

<P><STRONG><a name="[42]"></a>arg_strAppend</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + In Cycle
<LI>Call Chain = arg_strAppend &rArr;  strsAppend (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_GLB
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>args_cacheStr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = args_cacheStr &rArr; args_setStr &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setStr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_sub_stmt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
</UL>

<P><STRONG><a name="[f6]"></a>args_getBuff</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setSymbel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsReplace
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetFirstToken
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsDeleteChar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCut
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_transferd_str
</UL>

<P><STRONG><a name="[fa]"></a>args_getInt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = args_getInt &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___next__Method
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_getMethod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___next__Method
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___next__Method
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_setArg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getSize
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
</UL>

<P><STRONG><a name="[4d]"></a>args_getNode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = args_getNode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_time33
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_strMethod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_iterMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___getitem__Method
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_RangeObj___next__Method
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___getitem__Method
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___contains__Method
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_setMethod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_removeMethod
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___contains__Method
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMethodInfo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setPtrWithType
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_runMethodArgWithState
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>args_getPtr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = args_getPtr &rArr; args_getNode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VM_instruction_handler_DEF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_updateMethod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getTuple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[f7]"></a>args_getStr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = args_getStr &rArr; args_getNode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_GLB
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_setMethod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_removeMethod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_getMethod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_cacheStr
</UL>

<P><STRONG><a name="[104]"></a>args_getTuple</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = args_getTuple &rArr; obj_getPtr &rArr;  obj_getHostObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
</UL>

<P><STRONG><a name="[ef]"></a>args_pushArg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>

<P><STRONG><a name="[f2]"></a>args_pushArg_name</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = args_pushArg_name &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_iterMethod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___getitem__Method
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObjMethod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_RangeObj___next__Method
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_MemCheckerMethod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___next__Method
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___iter__Method
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__Method
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___iter__Method
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_getMethod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___next__Method
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___iter__Method
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___getitem__Method
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_getMethod
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___next__Method
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___iter__Method
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___getitem__Method
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_pikaList
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnStr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnObj
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_returnInt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setPtrWithType
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
</UL>

<P><STRONG><a name="[fc]"></a>args_removeArg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = args_removeArg &rArr; __link_removeNode &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_removeNode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_removeMethod
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMethodInfo
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
</UL>

<P><STRONG><a name="[ee]"></a>args_setArg</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setContent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_freeContent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinitHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_setArg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newMetaObj
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setStr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setRef
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__class_defineMethodWithType
</UL>

<P><STRONG><a name="[f8]"></a>args_setInt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = args_setInt &rArr; arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___next__Method
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___next__Method
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___next__Method
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
</UL>

<P><STRONG><a name="[f1]"></a>args_setPtrWithType</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = args_setPtrWithType &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[f3]"></a>args_setRef</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = args_setRef &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setRef
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RAS
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setRef
</UL>

<P><STRONG><a name="[f5]"></a>args_setStr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = args_setStr &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_GLB
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_cacheStr
</UL>

<P><STRONG><a name="[14d]"></a>args_setSysOut</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = args_setSysOut &rArr; __platform_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
</UL>

<P><STRONG><a name="[47]"></a>byteCodeFrame_deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + In Cycle
<LI>Call Chain = byteCodeFrame_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>fast_atoi</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fast_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_VM_JEZ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_SER
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NUM
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NEL
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_JMP
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[101]"></a>fast_itoa</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fast_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASM_addBlockDeepth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_setArg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_getArg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaList_append
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[183]"></a>fgetc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[cf]"></a>hash_time33</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
</UL>

<P><STRONG><a name="[173]"></a>hash_time33EndWith</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
</UL>

<P><STRONG><a name="[105]"></a>link_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = link_deinit &rArr; pikaFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___del__Method
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___del__Method
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetCleanCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getClassObjByNewFun
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit_no_del
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[150]"></a>method_returnInt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = method_returnInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___len__Method
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___len__Method
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_lenMethod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___len__Method
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___contains__Method
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___len__Method
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___contains__Method
</UL>

<P><STRONG><a name="[151]"></a>method_returnObj</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = method_returnObj &rArr; arg_setPtr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setPtr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setNull
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_keysMethod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_itemsMethod
</UL>

<P><STRONG><a name="[14e]"></a>method_returnStr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = method_returnStr &rArr; arg_newStr &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_pushArg_name
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_strMethod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
</UL>

<P><STRONG><a name="[135]"></a>newNormalObj</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = newNormalObj &rArr; obj_getClassObjByNewFun &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMethodInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getClassObjByNewFun
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_updateMethod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_keysMethod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_itemsMethod
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newDirectObj
</UL>

<P><STRONG><a name="[de]"></a>obj_deinit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + In Cycle
<LI>Call Chain = obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit_no_del
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_DEL
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_updateMethod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinitHeap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[129]"></a>obj_deinit_no_del</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = obj_deinit_no_del &rArr; link_deinit &rArr; pikaFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaFree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
</UL>

<P><STRONG><a name="[12a]"></a>obj_getArg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = obj_getArg &rArr;  obj_getArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_NEW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_EST
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___setitem__Method
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
</UL>

<P><STRONG><a name="[153]"></a>obj_getByteCodeFromModule</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = obj_getByteCodeFromModule &rArr; obj_isArgExist &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getObj
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>obj_getClassObjByNewFun</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = obj_getClassObjByNewFun &rArr; New_link &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[12f]"></a>obj_getHostObj</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setRef
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>

<P><STRONG><a name="[40]"></a>obj_getInt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_getInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_getBlockDeepthNow
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>obj_getObj</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = obj_getObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RAS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getByteCodeFromModule
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[4b]"></a>obj_getPtr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = obj_getPtr &rArr;  obj_getHostObj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___next__Method
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___len__Method
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___len__Method
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_len
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___del__Method
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___contains__Method
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_removeMethod
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___next__Method
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___len__Method
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___del__Method
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___contains__Method
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getByteCodeFromModule
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getTuple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getProp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_Dict_set
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>obj_getStr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_getStr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getStr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___setitem__Method
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___getitem__Method
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[13c]"></a>obj_isArgExist</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_isArgExist &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RUN
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_DEL
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getByteCodeFromModule
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[152]"></a>obj_newMetaObj</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = obj_newMetaObj &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newMetaObj
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newObj
</UL>

<P><STRONG><a name="[144]"></a>obj_newObj</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = obj_newObj &rArr; obj_newMetaObj &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_newMetaObj
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_newStr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaMain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[13b]"></a>obj_removeArg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_removeArg &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_removeArg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RAS
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_DEL
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_iterMethod
</UL>

<P><STRONG><a name="[109]"></a>obj_setInt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_intMethod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_floatMethod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___iter__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___iter__Method
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___iter__Method
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___iter__Method
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseSubStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueObj_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_runMethodArgWithState
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cache_bytecodeframe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[132]"></a>obj_setPtr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_setPtr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setPtrWithType
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___init__
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_keysMethod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_itemsMethod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___init__Method
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_SysObj
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_RangeObj
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib_MemChecker
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdLib
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_dict_keys
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_dict_items
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_Tuple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaStdData_Dict
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaMain
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>obj_setRef</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_setRef &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setRef
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_updateMethod
</UL>

<P><STRONG><a name="[3f]"></a>obj_setStr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = obj_setStr &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getHostObj
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_keys___str__Method
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___str__Method
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict___str__Method
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>obj_toStr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = obj_toStr &rArr;  pikaVM_runByteCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsFormat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pikaVM_runByteCode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__link_deinit_pyload
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_singlePrint
</UL>

<P><STRONG><a name="[ca]"></a>pikaFree</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pikaFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit_no_del
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_freeContent
</UL>

<P><STRONG><a name="[102]"></a>pikaList_append</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pikaList_append &rArr; args_setInt &rArr; arg_newInt &rArr; arg_setInt &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setInt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_dict_items___next__
</UL>

<P><STRONG><a name="[4e]"></a>pikaList_getArg</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pikaList_getArg &rArr; fast_itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___str__Method
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___contains__Method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>pikaList_getSize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pikaList_getSize &rArr; args_getInt &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_rangeMethod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple_len
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Tuple___contains__Method
</UL>

<P><STRONG><a name="[100]"></a>pikaList_setArg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pikaList_setArg &rArr; args_setArg &rArr;  args_pushArg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_itoa
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_setArg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
</UL>

<P><STRONG><a name="[d0]"></a>pikaMalloc</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_PikaObj
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arg_set_hash
</UL>

<P><STRONG><a name="[128]"></a>pikaVM_runByteCode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = pikaVM_runByteCode &rArr; _do_pikaVM_runByteCode &rArr; __pikaVM_runByteCodeFrameWithState &rArr; VMState_solveUnusedStack &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_pikaVM_runByteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_IMP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_lenMethod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_iterMethod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj___setitem__Method
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdData_Dict_updateMethod
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_deinit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vm_get
</UL>

<P><STRONG><a name="[108]"></a>queueObj_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = queueObj_init &rArr; obj_setInt &rArr; obj_getHostObj &rArr; __obj_getObjWithKeepDeepth &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[130]"></a>removeMethodInfo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = removeMethodInfo &rArr; args_removeArg &rArr; __link_removeNode &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_removeArg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getNode
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newNormalObj
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[10c]"></a>stack_deinit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = stack_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[10a]"></a>stack_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = stack_init &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[112]"></a>stack_popArg_alloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stack_popArg_alloc &rArr; _stack_popArg &rArr; arg_copy_noalloc &rArr; arg_setContent &rArr; arg_create &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_popArg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_SLC
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RET
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_solveUnusedStack
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[10e]"></a>stack_pushArg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stack_pushArg &rArr; _stack_pushArg &rArr;  arg_deinitHeap (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_pushArg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushStr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
</UL>

<P><STRONG><a name="[10d]"></a>stack_pushPyload</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stack_pushPyload &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stack_pushArg
</UL>

<P><STRONG><a name="[110]"></a>stack_pushStr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = stack_pushStr &rArr; arg_setStr &rArr; arg_set &rArr; _arg_set_hash &rArr; pikaMalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pushArg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_setStr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[10b]"></a>stack_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pikaVM_runByteCodeFrameWithState
</UL>

<P><STRONG><a name="[114]"></a>strAppendWithSize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strAppendWithSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsAppend
</UL>

<P><STRONG><a name="[113]"></a>strCut</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strCut
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCut
</UL>

<P><STRONG><a name="[ec]"></a>strEqu</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strEqu &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OPT_EQU
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_RAS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TokenStream_getSize
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_isEqual
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[119]"></a>strGetFirstToken</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strGetFirstToken
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsGetFirstToken
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__class_defineMethodWithType
</UL>

<P><STRONG><a name="[11a]"></a>strIsStartWith</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = strIsStartWith &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[115]"></a>strPointToLastToken</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strPointToLastToken
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_REF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopLastToken
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setStr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setRef
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setPtr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_setInt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_removeArg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_isArgExist
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getStr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getPtr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getInt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getArg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_getMethodArg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_setArg
</UL>

<P><STRONG><a name="[117]"></a>strPopFirstToken</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strPopFirstToken
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OUT
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsPopToken
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_getObjWithKeepDeepth
</UL>

<P><STRONG><a name="[116]"></a>strPopLastToken</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strPopLastToken &rArr; strPointToLastToken
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPointToLastToken
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMState_loadArgsFromMethodArg
</UL>

<P><STRONG><a name="[41]"></a>strsAppend</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strAppendWithSize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM_instruction_handler_OPT
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_setToken
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenRule_toAsm
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_strAppend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>strsCacheArg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = strsCacheArg &rArr; strsCopy &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
</UL>

<P><STRONG><a name="[11e]"></a>strsCopy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = strsCopy &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lexer_getTokenStream
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_removeTokensBetween
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_genAsm_sub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsPopToken
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCacheArg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_sub_stmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[11d]"></a>strsCut</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = strsCut &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCut
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[11f]"></a>strsDeleteChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = strsDeleteChar &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[d8]"></a>strsFormat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = strsFormat &rArr;  args_getBuff (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_str
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PikaStdLib_SysObj_printMethod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_toStr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printBytes
</UL>

<P><STRONG><a name="[145]"></a>strsGetCleanCmd</STRONG> (Thumb, 162 bytes, Stack size 88 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = strsGetCleanCmd &rArr; _Cursor_parse &rArr; Lexer_getTokenStream &rArr; Lexer_setSymbel &rArr; Lexer_setToken &rArr; strsAppend &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_beforeIter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_link
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_deinit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_deinit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[120]"></a>strsGetFirstToken</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = strsGetFirstToken &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strGetFirstToken
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>

<P><STRONG><a name="[3e]"></a>strsPopToken</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = strsPopToken &rArr; strsCopy &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsCopy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strPopFirstToken
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cursor_beforeIter
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_iterStart
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_isContain
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>strsReplace</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, lto-llvm-4aeb69.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = strsReplace &rArr; args_getBuff &rArr; args_pushArg &rArr; arg_deinit &rArr; arg_deinitHeap &rArr; obj_deinit &rArr;  arg_deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_getBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_parseStmt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__obj_shellLineHandler_REPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-4aeb69.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
